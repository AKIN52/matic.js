(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{193:function(e,t,n){"use strict";n.r(t);var r={components:{Layout:n(173).a}},o=n(14),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("Layout",{attrs:{title:"API Architecture",description:"The library follows common api architecture throughout",keywords:"api architecture, api type, read, write, polygon",contentSrc:"/home/runner/work/matic.js/matic.js/docs/content/docs/api-architecture.md"}},[n("p",[e._v("The library follows common api architecture throughout and the APIs are divided into two types -")]),e._v(" "),n("ol",[n("li",[e._v("Read API")]),e._v(" "),n("li",[e._v("Write API")])]),e._v(" "),n("h2",{attrs:{id:"readapi"}},[e._v("Read API")]),e._v(" "),n("p",[e._v("Read APIs does not publish anything on blockchain, so it does not consume any gas. Example of read APIs are - "),n("code",[e._v("getBalance")]),e._v(", "),n("code",[e._v("isWithdrawExited")]),e._v(" etc.")]),e._v(" "),n("p",[e._v("Let's see an example of read API -")]),e._v(" "),n("pre",[n("code",[e._v("const erc20 = posClient.erc20('<token address>');\nconst balance = await erc20.getBalance('<user address>')\n")])]),e._v(" "),n("p",[e._v("read APIs are very simple and returns result directly.")]),e._v(" "),n("h2",{attrs:{id:"2writeapi"}},[e._v("2. Write API")]),e._v(" "),n("p",[e._v("Write APSs publish some data on the blockchain, so it consumes gas. Example of write APIs are - "),n("code",[e._v("approve")]),e._v(", "),n("code",[e._v("deposit")]),e._v(" etc.")]),e._v(" "),n("p",[e._v("When you are calling a write API - you need two data from the result.")]),e._v(" "),n("ol",[n("li",[e._v("TransactionHash")]),e._v(" "),n("li",[e._v("TransactionReceipt")])]),e._v(" "),n("p",[n("br"),e._v("\nLet's see an example of write API and get the transactionhash and receipt -")]),e._v(" "),n("pre",[n("code",[e._v("const erc20 = posClient.erc20('<token address>');\n\n// send the transaction\nconst result = await erc20.approve(10);\n\n// get transaction hash\n\nconst txHash = await result.getTransactionHash();\n\n// get receipt\n\nconst receipt = await result.getReceipt();\n")])]),e._v(" "),n("h3",{attrs:{id:"transactionoption"}},[e._v("Transaction option")]),e._v(" "),n("p",[e._v("There are some configurable options that are available for all API's. These configurations can be passed in parameters.")]),e._v(" "),n("p",[e._v("Available configurations are -")]),e._v(" "),n("ul",[n("li",[e._v("from?: string | number - The address transactions should be made from.")]),e._v(" "),n("li",[e._v("to?: string - The address transactions should be made to.")]),e._v(" "),n("li",[e._v("value?: number | string | BN - The value transferred for the transaction in wei.")]),e._v(" "),n("li",[e._v("gasLimit?: number | string - The maximum gas provided for a transaction (gas limit).")]),e._v(" "),n("li",[e._v("gasPrice?: number | string | BN - The gas price in wei to use for transactions.")]),e._v(" "),n("li",[e._v("data?: string - The byte code of the contract.")]),e._v(" "),n("li",[e._v("nonce?: number;")]),e._v(" "),n("li",[e._v("chainId?: number;")]),e._v(" "),n("li",[e._v("chain?: string;")]),e._v(" "),n("li",[e._v("hardfork?: string;")]),e._v(" "),n("li",[e._v("returnTransaction?: boolean - making it true will return the transaction object which can be used to send transaction manually.")])]),e._v(" "),n("p",[n("br"),e._v("\nLet's see an example by configuring the gasPrice -")]),e._v(" "),n("pre",[n("code",[e._v("const erc20RootToken = posClient.erc20(<root token address>,true);\n\n// approve 100 amount\nconst approveResult = await erc20Token.approve(100, {\n    gasPrice: '4000000000',\n});\n\nconst txHash = await approveResult.getTransactionHash();\n\nconst txReceipt = await approveResult.getReceipt();\n")])])])}),[],!1,null,null,null);t.default=component.exports}}]);