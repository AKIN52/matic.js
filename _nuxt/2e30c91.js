(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{198:function(e,t,n){"use strict";n.r(t);var o={components:{Layout:n(174).a}},c=n(14),component=Object(c.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("Layout",{attrs:{title:"undefined",description:"undefined",keywords:"undefined",contentSrc:"/home/runner/work/matic.js/matic.js/docs/content/docs/plasma/initialize.md"}},[n("h1",{attrs:{id:"initializeplasmaclient"}},[e._v("Initialize Plasma client")]),e._v(" "),n("h4",{attrs:{id:"nodesyntax"}},[e._v("Node Syntax")]),e._v(" "),n("pre",[n("code",{staticClass:"js language-js"},[e._v("const Matic = require('maticjs')\n\nconst maticPlasmaClient = new Matic(options)\nmaticPlasmaClient.initialize()\n")])]),e._v(" "),n("h4",{attrs:{id:"es6syntax"}},[e._v("Es6 Syntax")]),e._v(" "),n("pre",[n("code",{staticClass:"js language-js"},[e._v("import Matic from 'maticjs'\n\nconst maticPlasmaClient = new Matic(options)\nmaticPlasmaClient.initialize()\n")])]),e._v(" "),n("h2",{attrs:{id:"options"}},[e._v("Options")]),e._v(" "),n("p",[e._v("Options can be provided in constructor in order to customize the client.")]),e._v(" "),n("pre",[n("code",[e._v('import Matic from \'maticjs\';\n\nconst options = {\n    network: "testnet",\n    version: "mumbai",\n    maticProvider: window.web3,\n    parentProvider: ethereumprovider,\n    parentDefaultOptions: { from: account },\n    maticDefaultOptions: { from: account },\n}\nconst maticPlasmaClient = new Matic(options)\n')])]),e._v(" "),n("p",[e._v("Available options are :")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("network")]),e._v(" can be "),n("code",[e._v("string")])]),e._v(" "),n("li",[n("code",[e._v("version")]),e._v(" can be "),n("code",[e._v("string")])]),e._v(" "),n("li",[n("code",[e._v("maticProvider")]),e._v(" can be "),n("code",[e._v("string")]),e._v(" or "),n("code",[e._v("Web3.providers")]),e._v(" instance. This provider must connect to Matic chain. Value can be anyone of following:")]),e._v(" "),n("li",[n("code",[e._v("network.Matic.RPC")])]),e._v(" "),n("li",[n("code",[e._v("new Web3.providers.HttpProvider(network.Matic.RPC)")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/WalletConnect/walletconnect-monorepo#for-web3-provider-web3js"}},[e._v("WalletConnect Provider instance")])]),e._v(" "),n("li",[n("code",[e._v("parentProvider")]),e._v(" can be "),n("code",[e._v("string")]),e._v(" or "),n("code",[e._v("Web3.providers")]),e._v(" instance. This provider must connect to Ethereum chain (testnet or mainchain). Value can be anyone of following:")]),e._v(" "),n("li",[n("code",[e._v("network.Main.RPC")])]),e._v(" "),n("li",[n("code",[e._v("new Web3.providers.HttpProvider(network.Main.RPC)")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/WalletConnect/walletconnect-monorepo#for-web3-provider-web3js"}},[e._v("WalletConnect Provider instance")])]),e._v(" "),n("li",[n("code",[e._v("parentDefaultOptions")]),e._v(" is simple Javascript "),n("code",[e._v("object")]),e._v(" with following options")]),e._v(" "),n("li",[n("code",[e._v("from")]),e._v(" must be valid account address(required)")]),e._v(" "),n("li",[n("code",[e._v("maticDefaultOptions")]),e._v(" is simple Javascript "),n("code",[e._v("object")]),e._v(" with following options")]),e._v(" "),n("li",[n("code",[e._v("from")]),e._v(" must be valid account address(required)")])]),e._v(" "),n("hr")])}),[],!1,null,null,null);t.default=component.exports}}]);